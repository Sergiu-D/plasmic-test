// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: juVZkpy6GyNsQ7cQcnMtYR
// Component: 32KigjMGo07r
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Header from "../../Header"; // plasmic-import: o3OmhqmRx_2W/component
import Client from "../../Client"; // plasmic-import: qhcrGo5R4WZi/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: hl1a0oV_dA0U/component
import FooterMain from "../../FooterMain"; // plasmic-import: tesvkPR1z3Cj/component
import { useScreenVariants as useScreenVariantsraGy9YoyxeH2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: RaGy9YoyxeH2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: juVZkpy6GyNsQ7cQcnMtYR/projectcss
import sty from "./PlasmicClients.module.css"; // plasmic-import: 32KigjMGo07r/css

createPlasmicElementProxy;

export const PlasmicClients__VariantProps = new Array();

export const PlasmicClients__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClients__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsraGy9YoyxeH2()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicClients.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicClients.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicClients.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"banner"}
            data-plasmic-override={overrides.banner}
            className={classNames(projectcss.all, sty.banner)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u18WX)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Clients"
                    : "Clients"}
                </h1>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Lorem Ipsum is simply dummy text of the printing and typesetting "
                    : "Lorem Ipsum is simply dummy text of the printing and typesetting "}
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___6IKjH)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__zxIVw)}
            >
              <div className={classNames(projectcss.all, sty.column__kz2X8)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___52I4)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__yeOb6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__i9ETe)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__qeJNg
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__ycwuM
                          )}
                        >
                          {"Client name"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__nPgly)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__q9HbA)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__looIz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__yuKh)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__hZ3Rm
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__ksyqr
                          )}
                        >
                          {"Client name 2"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__dy9UF)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tc93B)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__nOgOe)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__pPac)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__yofDz
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__ac3Zs
                          )}
                        >
                          {"Client name"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__n6PFj)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ssAuk)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__upuxg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___7KHmh)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__tgAN
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__dv0Yc
                          )}
                        >
                          {"Client name"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"clientsSection5"}
            data-plasmic-override={overrides.clientsSection5}
            hasGap={true}
            className={classNames(projectcss.all, sty.clientsSection5)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wIm0)}
            >
              <div className={classNames(projectcss.all, sty.columns__w6XiL)}>
                <div className={classNames(projectcss.all, sty.column___3H0H)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__j0XgL
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "More client's we've worked with"
                      : "More client's we've worked with"}
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.column__kima3)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rWruv)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wYe1J)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__saN7W)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/agency_website/images/airbnbSvg.svg",
                          fullWidth: 300,
                          fullHeight: 96,
                          aspectRatio: 3.125
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__l9XI2)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/agency_website/images/asanaSvg.svg",
                          fullWidth: 300,
                          fullHeight: 62,
                          aspectRatio: 4.863636
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__vFjs7)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/agency_website/images/disneySvg.svg",
                          fullWidth: 300,
                          fullHeight: 124,
                          aspectRatio: 2.41655
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__uUaG)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/agency_website/images/instacartSvg.svg",
                          fullWidth: 300,
                          fullHeight: 60,
                          aspectRatio: 4.961538
                        }}
                      />
                    </Stack__>
                  </div>
                </div>
              </div>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />
          </div>
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "banner",
    "foreground2",
    "h1",
    "text",
    "clientsSection5",
    "footerTopSection",
    "homeFooterTop",
    "footerMain"
  ],

  header: ["header"],
  banner: ["banner", "foreground2", "h1", "text"],
  foreground2: ["foreground2", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  clientsSection5: ["clientsSection5"],
  footerTopSection: ["footerTopSection", "homeFooterTop"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClients__ArgProps,
          internalVariantPropNames: PlasmicClients__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClients__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClients";
  } else {
    func.displayName = `PlasmicClients.${nodeName}`;
  }
  return func;
}

export const PlasmicClients = Object.assign(
  // Top-level PlasmicClients renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),
    // Metadata about props expected for PlasmicClients
    internalVariantProps: PlasmicClients__VariantProps,
    internalArgProps: PlasmicClients__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Clients",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicClients;
/* prettier-ignore-end */
